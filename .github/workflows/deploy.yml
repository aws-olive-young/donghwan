name: AWS Study
#main 브랜치에 push 발생할 때마다 워크플로우 실행
on:
  push:
    branches:
      - main
#전역 환경 변수 선언
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: oliveyoung-app
  ECS_CLUSTER: oliveyoung-cluster
  ECS_SERVICE: oliveyoung-service
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: oliveyoung-container

jobs:
  deploy:
    name: Build Docker Image and Deploy
    runs-on: ubuntu-latest

    steps:
      #GitHub 코드 받아오기
      - name: Checkout code
        uses: actions/checkout@v3

      #Java17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'


      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      #Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      #AWS 인증 설정
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #ECR 로그인
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      #Docker 빌드 및 ECR 푸시
      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG

      #ECS Task 정의 업데이트 및 배포
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true  #ECS 서버가 안정화될 때까지 대기
